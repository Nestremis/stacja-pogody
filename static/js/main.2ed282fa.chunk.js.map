{"version":3,"sources":["Form.js","Result.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","type","value","onChange","change","placeholder","Result","weather","date","clouds","city","humidity","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","toUpperCase","className","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","all","catch","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAeeA,EAbF,SAAAC,GACX,OACE,+BACE,uBACEC,KAAK,OACLC,MAAOF,EAAME,MACbC,SAAUH,EAAMI,OAChBC,YAAY,oBC0BLC,G,MAhCA,SAAAN,GAAU,IAAD,EAE+DA,EAAMO,QAAnFC,EAFc,EAEdA,KAAMC,EAFQ,EAERA,OAAQC,EAFA,EAEAA,KAAMC,EAFN,EAEMA,SAAUC,EAFhB,EAEgBA,QAASC,EAFzB,EAEyBA,OAAQC,EAFjC,EAEiCA,KAAMC,EAFvC,EAEuCA,SAAUC,EAFjD,EAEiDA,KAAMC,EAFvD,EAEuDA,IAEzEC,EAAU,KAEd,IAAKD,GAAOP,EAAM,CAChB,IAAMS,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAE3CH,EACE,qCACE,mCAAOR,EAAKa,cAAZ,mBACA,+CAAkBT,EAAlB,YACA,0CAAcE,EAAd,UACA,gDAAoBP,EAApB,SACA,kDAAiBM,EAAjB,UACA,uDAAiBJ,EAAjB,SACA,2DAAyBQ,EAAzB,MAA0CG,KAC1C,iEAA6Bd,QAMnC,OACE,qBAAKgB,UAAU,SAAf,SACGP,EAAG,2BAAuBP,GAASQ,MC0D3BO,G,kNA9EbC,MAAQ,CACNxB,MAAO,GACPM,KAAM,GACNE,KAAM,GACND,OAAO,GACPE,SAAS,GACTC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,KAAK,G,EAGPU,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZ3B,MAAO0B,EAAEE,OAAO5B,S,iEAMD6B,EAAWC,GAAY,IAAD,OAIvC,GAAgC,IAA5BC,KAAKP,MAAMxB,MAAMgC,QACjBF,EAAU9B,QAAU+B,KAAKP,MAAMxB,MAAO,CACxC,IAAMiC,EAAG,4DAAwDF,KAAKP,MAAMxB,MAAnE,kBAhCA,mCAgCA,iBAETkC,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIvB,MAAOwB,iBACxB,EAAKf,UAAS,SAAAH,GAAK,MAAK,CACtBT,KAAK,EACLT,KAAMmC,EACN/B,QAAS8B,EAAKG,IAAIjC,QAClBC,OAAQ6B,EAAKG,IAAIhC,OACjBC,KAAM4B,EAAKI,KAAKhC,KAChBC,SAAU2B,EAAKI,KAAK/B,SACpBJ,SAAU+B,EAAKI,KAAKnC,SACpBK,KAAM0B,EAAK1B,KAAK+B,MAChBtC,OAAQiC,EAAKjC,OAAOuC,IACpBtC,KAAMgB,EAAMxB,aAGf+C,OAAM,SAAAhC,GACLiC,QAAQC,IAAIlC,GACZ,EAAKY,UAAS,SAAAG,GAAS,MAAK,CAC1Bf,KAAK,EACLP,KAAMsB,EAAU9B,gB,+BASxB,OACI,sBAAKsB,UAAU,MAAf,UACE,cAAC,EAAD,CACEtB,MAAO+B,KAAKP,MAAMxB,MAClBE,OAAQ6B,KAAKN,oBAEf,cAAC,EAAD,CAAQpB,QAAS0B,KAAKP,e,GA1Ed0B,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2ed282fa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"Wpisz miasto\"\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n\r\n\r\n","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = props => {\r\n\r\n  const { date, clouds, city, humidity, sunrise, sunset, temp, pressure, wind, err } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <>\r\n        <h3> { city.toUpperCase()} aktualnie : </h3>\r\n        <h4>Temperatura  {temp} &#176;C</h4>\r\n        <h4> Wiatr  { wind} m/s</h4>\r\n        <h4>Zachmurzenie  { clouds} % </h4>\r\n        <h4>Ciśnienie  { pressure} hPa</h4>\r\n        <h4>Wilgotność { humidity} % </h4>\r\n        <h4>Wschód i zachód :  { sunriseTime} - { sunsetTime}</h4>\r\n        <>Dane dla dnia i godziny  { date}</>\r\n      </>\r\n    )\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `Nie mamy w bazie ${city}` : content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\n// Klucz do API\nconst APIKey = 'efa2ef11f117f7485b2fca8e87a3a2f5'\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    clouds:'',\n    humidity:'',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n\n//Jesli wrzucimy to poprzez componentDidUpdate osiągamy efekt zapytania do bazy po każdej zmianie w inpucie - czyli jak już zaczynamy pisać on sprawdza po każdej literze \n  componentDidUpdate(prevProps, prevState) { //mimo że nei używamy wpisujemy props: tutaj prevProps\n    // console.log(\"poprzedia wartość \" + prevState.value);\n    // console.log(\"aktualna wartość \" + this.state.value);\n\n    if (this.state.value.length === 0) return // tzn. jeśli mniej niż jedna litera wpisana w input nie wysyłaj zapytania\n    if (prevState.value !== this.state.value) { //ten warunek aby uniknąć nieksończonej pętli \n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(\"Nie udało się\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString()\n          this.setState(state => ({\n            err: false,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            humidity: data.main.humidity,\n            wind: data.wind.speed,\n            clouds: data.clouds.all,\n            city: state.value\n          }))\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }))\n        })\n\n    }\n\n  }\n\n  render() {\n    return (     \n        <div className=\"App\">\n          <Form\n            value={this.state.value}\n            change={this.handleInputChange}\n          />\n          <Result weather={this.state} />\n        </div>\n          );\n       }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}